name: Functional Tests

on:
  workflow_dispatch:
    inputs:
      api_version:
        description: "API Version"
        default: "latest"
        type: string
        required: False
      worker_version:
        description: "Worker Version"
        default: "latest"
        type: string
        required: False
      cli_version:
        description: "CLI Version"
        default: "latest"
        type: string
        required: False
  workflow_call:
    inputs:
      api_version:
        description: "API Version"
        default: "latest"
        type: string
        required: False
      worker_version:
        description: "Worker Version"
        default: "latest"
        type: string
        required: False
      cli_version:
        description: "CLI Version"
        default: "latest"
        type: string
        required: False

jobs:
  functional:
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq:3-alpine

      redis:
        image: redis:4.0

      web-server:
        image: httpd:latest
        volumes:
          - trs-storage:/usr/local/apache2/htdocs
        ports:
          - 8080:80

      trs-worker:
        image: ghcr.io/kaprien/tuf-repository-service-worker:${{ inputs.worker_version }}
        credentials:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GPR_TOKEN }}
        volumes:
          - trs-worker-data:/data
          - trs-storage:/var/opt/tuf-repository-service/storage
          - trs-keystorage:/var/opt/tuf-repository-service/keystorage
        env:
          TRS_STORAGE_BACKEND: LocalStorage
          TRS_KEYVAULT_BACKEND: LocalKeyVault
          TRS_LOCAL_STORAGE_BACKEND_PATH: /var/opt/tuf-repository-service/storage
          TRS_LOCAL_KEYVAULT_PATH: /var/opt/tuf-repository-service/keystorage
          TRS_BROKER_SERVER: amqp://guest:guest@rabbitmq:5672
          TRS_REDIS_SERVER: redis://redis
          TRS_WORKER_ID: dev

      trs-api:
        image: ghcr.io/kaprien/tuf-repository-service-api:${{ inputs.api_version }}
        credentials:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GPR_TOKEN }}
        ports:
          - 80:80
        env:
          TRS_BOOTSTRAP_NODE: "true"
          TRS_BROKER_SERVER: amqp://guest:guest@rabbitmq:5672
          TRS_REDIS_SERVER: redis://redis
          SECRETS_TRS_TOKEN_KEY: ${{ secrets.ADMIN_SECRET_PASSWD }}-token-key
          SECRETS_TRS_ADMIN_PASSWORD: ${{ secrets.ADMIN_SECRET_PASSWD }}

    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - uses: actions/setup-python@c4e89fac7e8767b327bbad6cb4d859eda999cf08

      - name: Install Python Dependencies
        run: |
          pip install pipenv
          pip install -r requirements.txt

      - name: Install the TRS Command Line Interface (dev)
        if: ${{ inputs.cli_version == 'dev' }}
        run: |
          git submodule update --init tuf-repository-service-cli
          git submodule foreach git pull origin main
          pip install tuf-repository-service-cli/

      - name: Install the TRS Command Line Interface (released)
        if: ${{ inputs.cli_version != 'dev' }}
        run: |
          wget https://docs.kaprien.com/tuf_repository_service-${{ inputs.cli_version }}-py3-none-any.whl
          pip install "dynaconf[ini]"
          pip install ./tuf_repository_service-${{ inputs.cli_version }}-py3-none-any.whl

      - name: Functional Tests (BDD)
        env:
          ADMIN_SECRET_TESTS: ${{ secrets.ADMIN_SECRET_PASSWD }}
        # First try to check if the http://localhost responds 200 (OK)
        # Retry for 3x (waiting 30 seconds each)
        # After the retries, it tries to run Functional tests
        run: |
            retry=1; while [[ ${retry} -lt 4 ]]; do echo Try ${retry}/3; sc=$(curl -s -o /dev/null -w "%{http_code}" http://localhost || true); if [[ ${sc} -ne 200 ]]; then echo Waiting TRS API; sleep 30; let 'retry+=1'; else break; fi; done
            make functional-tests

      - name: Check Tests Lint and Dependencies
        run: |
          make lint
